-- // Vars \\ --
local noclipE = nil
local antifall = nil
local currentTween = nil
local plr = game.Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Settings = {
    ["autofarm_mobs"] = false,
    ["autofarm_boss"] = false,
    ["TpSpeed"] = 80,
    ["ChosenMob"] = "Green Demon",
    ["ChosenBoss"] = "Okuro"
}

local function noclip()
    if plr.Character then
        for _, v in pairs(plr.Character:GetDescendants()) do
            if v:IsA("BasePart") and v.CanCollide == true then
                v.CanCollide = false
            end
        end
    end
end

local function moveto(cframe, speed)
    if currentTween then
        currentTween:Cancel()
    end

    local info = TweenInfo.new(((plr.Character.HumanoidRootPart.Position - cframe.Position).Magnitude) / speed, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(plr.Character.HumanoidRootPart, info, {CFrame = cframe})

    if not plr.Character.HumanoidRootPart:FindFirstChild("BodyVelocity") then
        antifall = Instance.new("BodyVelocity", plr.Character.HumanoidRootPart)
        antifall.Velocity = Vector3.new(0, 0, 0)
        antifall.MaxForce = Vector3.new(0, math.huge, 0)
        noclipE = RunService.Stepped:Connect(noclip)
    end

    tween:Play()
    currentTween = tween

    tween.Completed:Connect(function()
        if antifall then antifall:Destroy() end
        if noclipE then noclipE:Disconnect() end
        currentTween = nil
    end)

    spawn(function()
        while tween.PlaybackState == Enum.PlaybackState.Playing do
            if not Settings["autofarm_mobs"] and not Settings["autofarm_boss"] then
                tween:Cancel()
                if antifall then antifall:Destroy() end
                if noclipE then noclipE:Disconnect() end
                currentTween = nil
                break
            end
            wait(0.1)
        end
    end)
end


-- // MOBS/BOSS LIST \\ --
local mob_list = {
    "Green Demon",
    "GenericOni",
    "FrostyOni",
    "Blue Demon",
    "GenericSlayer",
    "Zenitsu",
}

local boss_list = {
    "Kaigaku",
    "Gyutaro",
}

-- // Library \\ --
local Library = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- // Window \\ --
local Window = Fluent:CreateWindow({
    Title = "Demonfall AF",
    SubTitle = "by LynchYT",
    TabWidth = 160,
    Size = UDim2.fromOffset(543, 300),
    Acrylic = false,
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.RightControl
})

-- // TABS \\ --
local Tabs = {
    Farmingtab = Window:AddTab({ Title = " | Farming", Icon = "swords" }),
    Misctab = Window:AddTab({ Title = " | Miscellaneous", Icon = "settings" }),
    Trinketstab = Window:AddTab({ Title =" | Trinkets Farm", Icon = "dollar-sign" }),
    Teleporttab = Window:AddTab({ Title = " | Teleport", Icon = "plane" }),
    Autoskillstab = Window:AddTab({ Title = " | Auto Skills", Icon = "bot" }),
    Dupetabs = Window:AddTab({ Title = " | Dupe", Icon = "crown" }),
}

-- // FARMING TABS \\ --
local Section = Tabs.Farmingtab:AddSection("MOBS FARMING")

local Dropdown = Tabs.Farmingtab:AddDropdown("Dropdown", {
    Title = "CHOOSE MOBS",
    Description = "",
    Values = mob_list,
    Multi = false,
    Default = 1,
})

Dropdown:OnChanged(function(v)
    Settings["ChosenMob"] = v
end)

local Toggle = Tabs.Farmingtab:AddToggle("MyToggle", 
{
    Title = "FARM MOBS", 
    Description = "",
    Default = false,
    Callback = function(v)
      Settings["autofarm_mobs"] = v
        if not v and currentTween then
            currentTween:Cancel()
        end
    end 
})

local Section = Tabs.Farmingtab:AddSection("BOSS FARMING")

local Dropdown = Tabs.Farmingtab:AddDropdown("Dropdown", {
    Title = "CHOOSE BOSS",
    Description = "",
    Values = boss_list,
    Multi = false,
    Default = 1,
})

Dropdown:OnChanged(function(v)
    Settings["ChosenBoss"] = v
end)

local Toggle = Tabs.Farmingtab:AddToggle("MyToggle", 
{
    Title = "FARM BOSS", 
    Description = "",
    Default = false,
    Callback = function(v)
      Settings["autofarm_boss"] = v
        if not v and currentTween then
            currentTween:Cancel()
        end
    end 
})

local Section = Tabs.Farmingtab:AddSection("TWEEN SPEED")

local Slider = Tabs.Farmingtab:AddSlider("Slider", 
{
    Title = "TWEEN SPEED",
    Description = "",
    Default = 80,
    Min = 80,
    Max = 300,
    Rounding = 0,
    Callback = function(v)
        Settings["TpSpeed"] = v
    end
})

local function getClosestTarget(targetName)
    local dist, target = math.huge
    for _, v in pairs(Workspace:GetChildren()) do
        if v:IsA("Model") and v.Name == targetName then
            local mag = (plr.Character.HumanoidRootPart.Position - v:GetModelCFrame().p).Magnitude
            if mag < dist then
                dist = mag
                target = v
            end
        end
    end
    return target
end

local function autofarm(type, targetName)
    while Settings["autofarm_" .. type] do
        wait()
        pcall(function()
            local target = getClosestTarget(targetName)
            if not target then return end

            local enemy_mag = (plr.Character.HumanoidRootPart.Position - target:GetModelCFrame().p).Magnitude

            if not target:FindFirstChild("Executed") then
                moveto(target:GetModelCFrame() * CFrame.new(0, 0, 3), tonumber(Settings.TpSpeed or 75))
            end

            local characterModel = plr.Character:FindFirstChildWhichIsA("Model")
            local hasKatana = characterModel and characterModel:FindFirstChild("Blade")
            
            -- Attack logic
            if enemy_mag <= 10 then
                if hasKatana then
                    if not characterModel:FindFirstChild("Equipped").Part0 then
                        game:GetService("VirtualInputManager"):SendKeyEvent(true, "R", false, game)
                    end
                    
                    if target:FindFirstChild("Block") then
                        ReplicatedStorage.Remotes.Async:FireServer("Katana", "Heavy")
                    else
                        ReplicatedStorage.Remotes.Async:FireServer("Katana", "Server")
                    end
                else
                    -- Fallback to Combat if no Katana is found
                    local args = {
                        [1] = "Combat",
                        [2] = "Server"
                    }
                    ReplicatedStorage.Remotes.Async:FireServer(unpack(args))
                end
            end

            if target:FindFirstChild("Executed") then
                wait(1)
                target:Destroy()
            end

            if target:FindFirstChild("Down") then
                moveto(target:GetModelCFrame() * CFrame.new(0, 0, 3), tonumber(Settings.TpSpeed or 75))
                ReplicatedStorage.Remotes.Sync:InvokeServer("Character", "Execute")
            end

            for _, v in pairs(plr.Character:GetChildren()) do
                if v:IsA("StringValue") and (v.Name == "Stun" or v.Name == "Attacking" or v.Name == "AttackAnnounce" or v.Name == "Busy" or v.Name == "SequenceCooldown" or v.Name == "SequenceFactor" or v.Name == "HeavyCooldown" or v.Name == "Sequence" or v.Name == "SequenceFactor") then
                    v:Destroy()
                end
            end
        end)
    end
end

spawn(function()
    while wait() do
        if Settings["autofarm_mobs"] and Settings["ChosenMob"] then
            autofarm("mobs", Settings["ChosenMob"])
        end
    end
end)

spawn(function()
    while wait() do
        if Settings["autofarm_boss"] and Settings["ChosenBoss"] then
            autofarm("boss", Settings["ChosenBoss"])
        end
    end
end)

-- // RAID TABS \\ --


-- // PLAYER TABS \\ --


-- // MISC TABS \\ --
local Section = Tabs.Misctab:AddSection("INFINITE FUNCTION")

Tabs.Misctab:AddButton({
    Title = "Infinite Health",
    Description = "",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.Async:FireServer("Character", "FallDamageServer", 0/0)
    end
})

Tabs.Misctab:AddButton({
    Title = "Infinite Energy",
    Description = "",
    Callback = function()
        local player = game:GetService("Players").LocalPlayer
        while true do
            player.Stamina.Value = math.huge
            wait(0.1)
        end
    end
})

local InfiniteJumpEnabled = false
game:GetService("UserInputService").JumpRequest:connect(function()
    if InfiniteJumpEnabled then
        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
    end
end)

local Toggle = Tabs.Misctab:AddToggle("MyToggle", {
    Title = "Infinite Jump", 
    Description = "",
    Default = false,
    Callback = function(v)
        InfiniteJumpEnabled = v
    end
})


local Section = Tabs.Misctab:AddSection("OTHER FUNCTION")

local Slider = Tabs.Misctab:AddSlider("Slider", 
{
    Title = "FOV Changer",
    Description = "",
    Default = 80,
    Min = 80,
    Max = 120,
    Rounding = 0,
    Callback = function(Value)
        game.Workspace.CurrentCamera.FieldOfView = Value
    end
})

local Toggle = Tabs.Misctab:AddToggle("MyToggle", 
{
    Title = "Auto Pickup", 
    Description = "",
    Default = false,
    Callback = function(v)
        _G.AutoPickEnabled = v
        if v then
            spawn(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Players = game:GetService("Players")
                local workspace = game:GetService("Workspace")

                local player = Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local remote = ReplicatedStorage.Remotes.Async

                while _G.AutoPickEnabled do
                  
                    for _, item in pairs(workspace:GetChildren()) do
                        if item.Name == "DropItem" then
                          
                            local distance = (character.HumanoidRootPart.Position - item.Position).Magnitude
                            
                            if distance <= 100 then
                              
                                local args = {
                                    [1] = "Character",
                                    [2] = "Interaction",
                                    [3] = item
                                }

                                remote:FireServer(unpack(args))
                            end
                        end
                    end
                    
                    wait()
                end
            end)
        end
    end 
})

local Toggle = Tabs.Misctab:AddToggle("MyToggle", 
{
    Title = " Auto Breath", 
    Description = "",
    Default = false,
    Callback = function(v)
      Settings["AutoBreath"] = v
    end 
})

local function clearDebuffs(character)
    local busy = character:FindFirstChild("Busy")
    if busy then
        busy:Destroy()
    end

    local slow = character:FindFirstChild("Slow")
    if slow then
        slow:Destroy()
    end
end

local function autoBreath()
    local player = game:GetService("Players").LocalPlayer
    local breathing = player.Breathing

    if breathing and breathing.Value ~= 80 then
        game:GetService("ReplicatedStorage").Remotes.Async:FireServer("Character", "Breath", true)
    end
end

spawn(function()
    while wait(1) do
        if Settings.AutoBreath then
            local character = game.Players.LocalPlayer.Character
            if character then
                clearDebuffs(character)
                autoBreath()
            end
        end
    end
end)

local Toggle = Tabs.Misctab:AddToggle("MyToggle", 
{
    Title = "No Clip", 
    Description = "",
    Default = false,
    Callback = function(v)
      if v then
            noclipT = game:GetService("RunService").Stepped:Connect(noclip)
        else
            if noclipT then
                noclipT:Disconnect()
            end
        end
    end 
})

Tabs.Misctab:AddButton({
    Title = "Remove Fog",
    Description = "",
    Callback = function()
        local lighting = game:GetService("Lighting")
        local atmosphere = lighting:FindFirstChildOfClass("Atmosphere")
        
        if atmosphere then
            atmosphere.Density = 0
            atmosphere.Glare = 0
            atmosphere.Haze = 0
        end
    end
})


-- // TRINKET TABS \\ --
-- // List \\ --
local Ore_list = {
  "Sun Ore",
  "Iron Ore"
}

local Flower_list = {
  "Flower1",
  "Flower2",
  "Flower3",
}

-- Services and Variables
local runService = game:GetService("RunService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = game.Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()

-- Settings for Random Trinket Farm
local Settings = {
    RandomTrinketFarm = false,
    TpSpeed = 100
}

local Section = Tabs.Trinketstab:AddSection("TRINKETS FARM")

-- Trinkets Toggle for Random Trinket
local ToggleRandomTrinketFarm = Tabs.Trinketstab:AddToggle("RandomTrinketFarm", {
    Title = "Farm Random Trinket",
    Default = false
})

-- Farming Function
local function farmRandomTrinket()
    while Settings.RandomTrinketFarm do
        if not localPlayer or not character then return end
        for _, v in pairs(workspace:GetChildren()) do
            if not Settings.RandomTrinketFarm then return end
            if v:FindFirstChild("PickableItem") and v:FindFirstChild("Part") then
                -- Move to trinket position
                character.HumanoidRootPart.CFrame = v:FindFirstChild("Part").CFrame
                wait(0.5) -- Wait briefly to simulate movement time

                -- Simulate interaction with the trinket
                replicatedStorage.Remotes.Async:FireServer("Character", "Interaction", v:FindFirstChild("Part"))
                wait(1) -- Ensure there’s enough time for the interaction to complete
            end
        end
        wait(1) -- Optional delay to prevent too many operations
    end
end

-- Toggle Handler
ToggleRandomTrinketFarm:OnChanged(function(v)
    Settings["RandomTrinketFarm"] = v
    if v then
        spawn(farmRandomTrinket)
    end
end)

-- Update character if it respawns
local function updateCharacter()
    character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
end

localPlayer.CharacterAdded:Connect(updateCharacter)

-- Initialize Settings Table
local Settings = {}

local Section = Tabs.Trinketstab:AddSection("ORE FARM")

-- // Ores Dropdown \\ --
local DropdownOre = Tabs.Trinketstab:AddDropdown("Ore", {
    Title = "Choose Ore",
    Description = "Choose what ore to farm",
    Values = Ore_list,
    Multi = false,
    Default = 1,
})

DropdownOre:OnChanged(function(v)
    Settings["ChosenOre"] = v
end)

-- // Ore Toggle \\ --
local ToggleOre = Tabs.Trinketstab:AddToggle("Ore", {
    Title = "Farm Ore", 
    Description = "Teleport you to ore, must equip pickaxe to work",
    Default = false,
    Callback = function(v)
        Settings["FarmOre"] = v
    end 
})

local Section = Tabs.Trinketstab:AddSection("FLOWER FARM")

-- // Flowers Dropdown \\ --
local DropdownFlower = Tabs.Trinketstab:AddDropdown("Flowers", {
    Title = "Choose Flower",
    Values = Flower_list,
    Multi = false,
    Default = 1,
})

DropdownFlower:SetValue("Flower1")

DropdownFlower:OnChanged(function(v)
    Settings["ChosenFlower"] = v
end)

-- // Flower Toggle \\ --
local ToggleFlower = Tabs.Trinketstab:AddToggle("Flower", {
    Title = "Farm Flower",
    Default = false
})

ToggleFlower:OnChanged(function(v)
    Settings.FarmFlower = v
end)

-- // Function Farm O/T/F \\ --
local function getOre()
    local dist, ore = math.huge
    for i, v in pairs(game:GetService("Workspace").Map.Minerals:GetDescendants()) do
        if v.Name == "MineralName" and v.Value == Settings.ChosenOre then
            local oremag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Parent.Position).magnitude
            if oremag < dist then
                dist = oremag
                ore = v.Parent
            end
        end
    end
    return ore
end

local function moveto(destinationCFrame, speed)
    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = character.HumanoidRootPart
        humanoidRootPart.CFrame = destinationCFrame
    end
end

spawn(function()
    while wait() do
        if Settings.FarmOre then
            local ore = getOre()
            if ore then
                local ore_mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - ore.Position).magnitude
                if ore_mag <= 5 then
                    game:GetService("ReplicatedStorage").Remotes.Sync:InvokeServer("Pickaxe", "Server")
                else
                    moveto(ore.CFrame, tonumber(Settings.TpSpeed or 100))
                end
            end
        end
    end
end)

local function teleportTo(destinationCFrame)
    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = destinationCFrame
    end
end

-- Main farming loop for flowers
spawn(function()
    while wait() do
        if Settings.FarmFlower then
            local chosenFlower = game.Workspace.Map:FindFirstChild(Settings.ChosenFlower)
            if chosenFlower then
                local flowerCFrame = chosenFlower:GetModelCFrame() * CFrame.new(0, 0, 0)
                teleportTo(flowerCFrame)
            end
        end
    end
end)

-- // TELEPORT TABS \\ --
local Section = Tabs.Teleporttab:AddSection("TELEPORT NPCS")

local Npcs = {}
for i, v in pairs(workspace.Npcs:GetChildren()) do
    table.insert(Npcs, v.Name)
end

table.sort(Npcs)

local Dropdown = Tabs.Teleporttab:AddDropdown("Dropdown", {
    Title = "Choose NPC",
    Description = "",
    Values = Npcs, 
    Multi = false,
    Default = Npcs[1]
})

local selectedNpcName

Dropdown:OnChanged(function(selectedNpc)
    selectedNpcName = selectedNpc
end)

local function teleportToNpcWorldPivot()
    if selectedNpcName then
        local npc = workspace.Npcs:FindFirstChild(selectedNpcName)
        
        if npc then
            local targetPosition = npc.WorldPivot.Position
            
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
        end
    end
end

Tabs.Teleporttab:AddButton({
    Title = "Teleport NPC",
    Description = "",
    Callback = function()
        teleportToNpcWorldPivot()
    end
})

local Section = Tabs.Teleporttab:AddSection("BREATHING TEACHER")

local Dropdown = Tabs.Teleporttab:AddDropdown("Dropdown", {
    Title = "Breathing Teacher",
    Description = "",
    Values = {"Flower Breathing", "Flame Breathing", "Insect Breathing", "Love Breathing", "Mist Breathing", "Moon Breathing", "Snake Breathing", "Sound Breathing", "Stone Breathing", "Sun Breathing", "Thunder Breathing", "Water Breathing", "Wind Breathing"},
    Multi = false,
    Default = 1,
})

local selectedBreath = ""

Dropdown:OnChanged(function(v)
    selectedBreath = v
end)

Tabs.Teleporttab:AddButton({
    Title = "Teleport",
    Description = "",
    Callback = function()
        local character = game.Players.LocalPlayer.Character
        local hrp = character and character:FindFirstChild("HumanoidRootPart")

        if not hrp then return end

        local npcModels = {
            ["Flower Breathing"] = workspace.Npcs.Tsuyuri,
            ["Flame Breathing"] = workspace.Npcs.Rengoku,
            ["Insect Breathing"] = workspace.Npcs.Shinobu,
            ["Love Breathing"] = workspace.Npcs.Mitsuri,
            ["Mist Breathing"] = workspace.Npcs.Tokito,
            ["Moon Breathing"] = workspace.Npcs.Kokushibo,
            ["Snake Breathing"] = workspace.Npcs.Iguro,
            ["Sound Breathing"] = workspace.Npcs.Uzui,
            ["Stone Breathing"] = workspace.Npcs.Gyoumei,
            ["Sun Breathing"] = workspace.Npcs.Tanjiro,
            ["Thunder Breathing"] = workspace.Npcs.Kujima,
            ["Water Breathing"] = workspace.Npcs.Urokodaki,
            ["Wind Breathing"] = workspace.Npcs.Grimm
        }

        local npcModel = npcModels[selectedBreath]
        if npcModel then
            hrp.CFrame = npcModel:GetPivot()
        end
    end
})

-- // AUTOSKILL TABS \\ --
local Toggles = {}
local Enabled = {}

-- Function to start the loop for a given skill number
local function startSkillLoop(skillNumber)
    while Enabled[skillNumber] do
        local keyCode
        -- Determine the KeyCode based on the skill number
        if skillNumber == 1 then
            keyCode = Enum.KeyCode.One
        elseif skillNumber == 2 then
            keyCode = Enum.KeyCode.Two
        elseif skillNumber == 3 then
            keyCode = Enum.KeyCode.Three
        elseif skillNumber == 4 then
            keyCode = Enum.KeyCode.Four
        elseif skillNumber == 5 then
            keyCode = Enum.KeyCode.Five
        elseif skillNumber == 6 then
            keyCode = Enum.KeyCode.Six
        elseif skillNumber == 7 then
            keyCode = Enum.KeyCode.Seven
        elseif skillNumber == 8 then
            keyCode = Enum.KeyCode.Eight
        end
        
        -- Send the key event
        game:GetService('VirtualInputManager'):SendKeyEvent(true, keyCode, false, game)
        wait(1)  -- Wait for 1 second before sending the key event again
    end
end

-- Add toggles and their callbacks
for i = 1, 8 do
    Toggles[i] = Tabs.Autoskillstab:AddToggle("MyToggle" .. i, {
        Title = "Auto Skill " .. i,
        Description = "",
        Default = false,
        Callback = function(v)
            Enabled[i] = v
            if v then
                startSkillLoop(i)
            end
        end
    })
end

-- // DUPE TABS \\ --
local function DupeItems(itemNames)
    for _, itemName in ipairs(itemNames) do
        local args = {
            [1] = "HUD",
            [2] = "Inventory",
            [3] = "Drop",
            [4] = itemName,
            [5] = -9999999999999999999999
        }
        
        game:GetService("ReplicatedStorage").Remotes.Sync:InvokeServer(unpack(args))
        
        Fluent:Notify({
            Title = "Notification",
            Content = "Dupe Successful! Check Your Inventory for " .. itemName,
            Duration = 3
        })
    end
end

local item_list = {
    "Wipe Potion", "Combat Potion", "Breath Indict", "Muzan Blood", "Perfect Crystal", "Green Jewel", "Red Jewel", "Gold Crown", "Ancient Coin", "Golden Ring", "Gold Jar", "Gold Goblet", "Iron Ore", "Sun Ore", "Demon Horn", "Broken Nichirin", "Blue Horn","Green Horn","Demon Collar","Crystal Key","Weapon Parts", "Crystal Essence","Dark Thunder Essence", "Premium Meat", "Meat", "Soup", "Bread"
}

local selectedItem

Tabs.Dupetabs:AddParagraph({
    Title = "Step 1",
    Content = "Make sure you have the item that you want to dupe"
})

Tabs.Dupetabs:AddParagraph({
    Title = "Step 2",
    Content = "Find the item you want to dupe in the dropdown or type it on Input(make sure spelling is correct), and then click the button"
})

local Input = Tabs.Dupetabs:AddInput("Input", {
    Title = "M NAME",
    Description = "",
    Default = "",
    Placeholder = "Item Name",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        selectedItem = Value
        print("Input changed:", Value)
    end
})

local Dropdown = Tabs.Dupetabs:AddDropdown("Dropdown", {
    Title = "ITEM LIST",
    Description = "",
    Values = item_list,
    Multi = false,
    Default = 1,
})

Dropdown:OnChanged(function(Value)
    selectedItem = Value
    print("Dropdown changed:", Value)
end)

Tabs.Dupetabs:AddButton({
    Title = "CLICK HERE TO DUPE",
    Description = "",
    Callback = function()
        if selectedItem then
            DupeItems({selectedItem})
        else
            Fluent:Notify({
                Title = "Error!",
                Content = "No item selected. Please select an item from the dropdown or input.",
                Duration = 3
            })
        end
    end
})
------------------------------------------------------Raid Functions


------------------------------------------------------Player Functions

------------------------------------------------------Trinket Functions
local function getOre()
    local dist, ore = math.huge
    for i, v in pairs(game:GetService("Workspace").Map.Minerals:GetDescendants()) do
        if v.Name == "MineralName" and v.Value == Settings.ChosenOre then
            local oremag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Parent.Position).magnitude
            if oremag < dist then
                dist = oremag
                ore = v.Parent
            end
        end
    end
    return ore
end

local function moveto(destinationCFrame, speed)
    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = character.HumanoidRootPart
        humanoidRootPart.CFrame = destinationCFrame
    end
end

spawn(function()
    while wait() do
        if Settings.FarmOre then
            local ore = getOre()
            if ore then
                local ore_mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - ore.Position).magnitude
                if ore_mag <= 5 then
                    game:GetService("ReplicatedStorage").Remotes.Sync:InvokeServer("Pickaxe", "Server")
                else
                    moveto(ore.CFrame, tonumber(Settings.TpSpeed or 100))
                end
            end
        end
    end
end)

local function teleportTo(destinationCFrame)
    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = destinationCFrame
    end
end

-- Main farming loop for flowers
spawn(function()
    while wait() do
        if Settings.FarmFlower then
            local chosenFlower = game.Workspace.Map:FindFirstChild(Settings.ChosenFlower)
            if chosenFlower then
                local flowerCFrame = chosenFlower:GetModelCFrame() * CFrame.new(0, 0, 0)
                teleportTo(flowerCFrame)
            end
        end
    end
end)

-- // close gui \\ --

local ScreenGui = Instance.new("ScreenGui")
local ImageButton = Instance.new("ImageButton")
local UICorner = Instance.new("UICorner")
ScreenGui.Name = ""
ScreenGui.Parent = game.CoreGui or game.Players.LocalPlayer.PlayerGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ImageButton.Parent = ScreenGui
ImageButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ImageButton.BackgroundTransparency = 1
ImageButton.BorderSizePixel = 0
ImageButton.Position = UDim2.new(0.120833337, 0, 0.0952890813, 0)
ImageButton.Size = UDim2.new(0, 50, 0, 50)
ImageButton.Draggable = true
ImageButton.Image = "https://www.roblox.com/asset/?id=18687520299"
UICorner.Parent = ImageButton
ImageButton.MouseButton1Down:connect(function()
       game:GetService("VirtualInputManager"):SendKeyEvent(true,305,false,game)
       game:GetService("VirtualInputManager"):SendKeyEvent(false,305,false,game)
end)
